/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.pcs_grupo_jaj;

import static com.mycompany.pcs_grupo_jaj.DBConexion.DRIVER;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 * Clase para realizar la simulación
 * @author A Miralles, J Munoz, J Pereiro
 * @version 1.0
 */
public class Simulacion extends javax.swing.JFrame {

    Connection conn = null;

    /**
     * Constructor Simulacion
     */
    public Simulacion() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SIMULACION SEGUNDOS");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Cantidad Segundos: ");

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("SIMULAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 26, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Boton que invoca al Metodo para realizar la simulacion
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int segundos;

        // Capturamos los datos de Entrada
        segundos = Integer.parseInt(this.jTextField1.getText());
        
        simular(segundos);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Metodo que realiza la simulación
     * @param segundos segundos a simular
     */
    public void simular(int segundos){
        try //modificar el trabajo de la BBDD
        {
            int resultado;
            int cant_op;
            int cap_op;
            double segrest;
            Class.forName(DRIVER);
            conn = DriverManager.getConnection(DBConexion.URL,DBConexion.USUARIO,DBConexion.PASSWORD);
            Statement stmt = conn.createStatement();
            ResultSet re = stmt.executeQuery("SELECT * FROM trabajos_centros WHERE t_estado='En proceso' ORDER BY t_orden ASC LIMIT 1");
            if (re.next()) {
                String cnombre=re.getString(4);
                segrest= re.getInt(7);
                cant_op = re.getInt(8);
                ResultSet rs = stmt.executeQuery("SELECT * FROM centros_computacion WHERE c_nombre_centro='"+cnombre+"'");               
                if (rs.next()) {
                    cap_op = rs.getInt("c_capacidad");
                    resultado = cant_op;
                    for (int tiempo = 1; tiempo <= segundos; tiempo++) {
                        resultado = resultado - cap_op;
                        segrest=segrest-1;
                        stmt.executeUpdate("UPDATE trabajos_centros SET t_op_rest='"+resultado+"'WHERE t_estado='En proceso' ORDER BY t_orden ASC LIMIT 1");
                        if (resultado <= 0) {
                            stmt.executeUpdate("UPDATE trabajos_centros SET t_estado='Finalizado'WHERE t_estado='En proceso' ORDER BY t_orden ASC LIMIT 1");
                            tiempo=tiempo+5;
                            stmt.executeUpdate("UPDATE trabajos_centros SET t_segundos_rest=0 WHERE t_estado='Finalizado' AND t_segundos_rest>=0 ORDER BY t_orden ASC LIMIT 1");
                            if (tiempo<=segundos){
                                ResultSet rx = stmt.executeQuery("SELECT * FROM trabajos_centros WHERE t_estado='En cola' ORDER BY t_orden ASC LIMIT 1");
                                if (rx.next()) {
                                    stmt.executeUpdate("UPDATE trabajos_centros SET t_estado='En proceso' WHERE t_estado='En cola' ORDER BY t_orden ASC LIMIT 1");
                                    tiempo=tiempo+5;
                                    ResultSet rc = stmt.executeQuery("SELECT * FROM centros_computacion WHERE c_nombre_centro='"+cnombre+"'");
                                    if (rc.next()){
                                        int cola = rc.getInt("c_cant_trabajos_cola");
                                        cola = cola - 1;
                                        stmt.executeUpdate("UPDATE centros_computacion SET c_cant_trabajos_cola='"+cola+"'WHERE c_nombre_centro='"+cnombre+"'");
                                        ResultSet ry = stmt.executeQuery("SELECT * FROM trabajos_centros WHERE t_estado='En proceso' ORDER BY t_orden ASC LIMIT 1");
                                        if (ry.next()) {
                                            cant_op = ry.getInt("t_cant_operaciones");
                                            ResultSet ra = stmt.executeQuery("SELECT * FROM centros_computacion WHERE c_nombre_centro='"+cnombre+"'");
                                            if (ra.next()) {
                                                cap_op = ra.getInt("c_capacidad");
                                                resultado=cant_op;
                                            }
                                        }
                                    }else{
                                        tiempo=tiempo+5;
                                    }
                                    continue;
                                }
                            }
                        } else {
                            stmt.executeUpdate("UPDATE trabajos_centros SET t_segundos_rest='"+segrest+"' WHERE t_estado='En proceso' ORDER BY t_orden ASC LIMIT 1");
                        }     
                    }
                    JOptionPane.showMessageDialog(this, "Simulación realizada con éxito", "Información", 1);
                }
                conn.close();
            } else {
                ResultSet rs = stmt.executeQuery("SELECT * FROM trabajos_centros WHERE t_estado='En cola' ORDER BY t_orden ASC LIMIT 1");
                if (rs.next()) {
                    stmt.executeUpdate("UPDATE trabajos_centros SET t_estado='En proceso' WHERE t_estado='En cola' ORDER BY t_orden ASC LIMIT 1");
                    ResultSet ro = stmt.executeQuery("SELECT * FROM trabajos_centros WHERE t_estado='En proceso'ORDER BY t_orden ASC LIMIT 1");
                    if (ro.next()) {
                        String cnombre=ro.getString(4);
                        segrest= ro.getInt(7);
                        cant_op = ro.getInt("t_cant_operaciones");
                        ResultSet rc = stmt.executeQuery("SELECT * FROM centros_computacion WHERE c_nombre_centro='"+cnombre+"'"); 
                        if (rc.next()) {
                            int cola = rc.getInt("c_cant_trabajos_cola");
                            cola = cola - 1;
                            cap_op = rc.getInt("c_capacidad");
                            resultado = cant_op;
                            stmt.executeUpdate("UPDATE centros_computacion SET c_cant_trabajos_cola='"+cola+"'WHERE c_nombre_centro='"+cnombre+"'");
                            for (int tiempo = 1; tiempo <= segundos; tiempo++) {
                                resultado = resultado - cap_op;
                                segrest=segrest-1;
                                stmt.executeUpdate("UPDATE trabajos_centros SET t_op_rest='"+resultado+"'WHERE t_estado='En proceso' ORDER BY t_orden ASC LIMIT 1");
                                if (resultado <= 0) {
                                    stmt.executeUpdate("UPDATE trabajos_centros SET t_estado='Finalizado' WHERE t_estado='En proceso' ORDER BY t_orden ASC LIMIT 1");
                                    tiempo=tiempo+5;
                                    stmt.executeUpdate("UPDATE trabajos_centros SET t_segundos_rest=0 WHERE t_estado='Finalizado' AND t_segundos_rest>=0 ORDER BY t_orden ASC LIMIT 1");
                                    if (tiempo<=segundos){
                                        ResultSet rx = stmt.executeQuery("SELECT * FROM trabajos_centros WHERE t_estado='En cola' ORDER BY t_orden ASC LIMIT 1");
                                        if (rx.next()) {
                                            stmt.executeUpdate("UPDATE trabajos_centros SET t_estado='En proceso' WHERE t_estado='En cola' ORDER BY t_orden ASC LIMIT 1");
                                            tiempo=tiempo+5;
                                            ResultSet rj = stmt.executeQuery("SELECT * FROM centros_computacion WHERE c_nombre_centro='"+cnombre+"'");
                                            if (rj.next()){
                                                ResultSet ry = stmt.executeQuery("SELECT * FROM trabajos_centros WHERE t_estado='En proceso' ORDER BY t_orden ASC LIMIT 1");
                                                if (ry.next()) {
                                                    cant_op = ry.getInt("t_cant_operaciones");
                                                    ResultSet ra = stmt.executeQuery("SELECT * FROM centros_computacion WHERE c_nombre_centro='"+cnombre+"'");
                                                        if (ra.next()) {
                                                        cap_op = ra.getInt("c_capacidad");
                                                        resultado=cant_op;
                                                    }
                                                }
                                            }
                                            else{
                                                tiempo=tiempo+5;
                                            }
                                            continue;
                                        }
                                    }
                                } else {
                                    stmt.executeUpdate("UPDATE trabajos_centros SET t_segundos_rest='"+segrest+"' WHERE t_estado='En proceso' ORDER BY t_orden ASC LIMIT 1");
                                }  
                            } 
                            JOptionPane.showMessageDialog(this, "Simulación realizada con éxito", "Información", 1);
                        }
                    }
                    conn.close();
                } else {
                    JOptionPane.showMessageDialog(this, "No existen trabajos por simular", "AVISO!", 0);
                }
                conn.close();
            }

        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "La simulación no ha podido ser realizada", "AVISO!", 0);
        }
        this.setVisible(false);
    }
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
